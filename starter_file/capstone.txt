Creating Compute
from azureml.core.compute import ComputeTarget, AmlCompute
from azureml.core.compute_target import ComputeTargetException
#Create compute cluster


# choose a name for your cluster
cluster_name= "cpu-cluster"

try:
    compute_target = ComputeTarget(workspace=ws , name=cluster_name)
    print('Found existing compute target')
except ComputeTargetException:
    print('Creating a new compute target ...')
    compute_config = AmlCompute.provisioning_configuration(vm_size='Standard_D2_V2' , max_nodes=4)
    #create the cluster
    cpu_cluster=ComputeTarget.create(ws,cluster_name,compute_config)
    print('cpu-cluster has been created')

TODO: Import Dependencies. In the cell below, import all the dependencies that you will need to complete the project.
from azureml.core import Workspace, Experiment
from azureml.widgets import RunDetails
from azureml.train.sklearn import SKLearn
from azureml.train.hyperdrive.run import PrimaryMetricGoal
from azureml.train.hyperdrive.policy import BanditPolicy
from azureml.train.hyperdrive.sampling import RandomParameterSampling
from azureml.train.hyperdrive.runconfig import HyperDriveConfig
from azureml.train.hyperdrive.parameter_expressions import uniform, quniform
import os
import joblib

DataSet
ws = Workspace.from_config()
experiment_name = 'mlexphyper'

experiment=Experiment(ws, experiment_name)

policy = BanditPolicy(evaluation_interval=2, slack_factor=0.1)

ps =RandomParameterSampling({
    "--C": choice(0.6,1,1.5),
    "--max_iter": choice(10,20,30,40)})

est =SKLearn(source_directory='./',
             entry_script='train.py',
             compute_target='cpu-cluster',    
             vm_size='Standard_D2_V2'
             )

# Create a HyperDriveConfig using the estimator, hyperparameter sampler, and policy.
hyperdrive_config =HyperDriveConfig(estimator=est,
                                    hyperparameter_sampling=ps,
                                    policy=policy,
                                    primary_metric_name='Accuracy',
                                    primary_metric_goal=PrimaryMetricGoal.MAXIMIZE,
                                    max_total_runs=20,
                                    max_concurrent_runs=4 
                                    
                                    )


# Submit your hyperdrive run to the experiment and 
hyperdrive_run=exp.submit(config=hyperdrive_config)
:
RunDetails(hyperdrive_run).show()

# Get your best run and save the model from that run
best_run = hyperdrive_run.get_best_run_by_primary_metric()
best_run_metrics = best_run.get_metrics()
print('Best Run ID: ', best_run.id)
print('\n Accuracy: ', best_run_metrics['Accuracy'])
print(best_run.get_details()['runDefinition']['arguments'])
print(best_run.get_file_names())

#save the best model
model =best_run.register_model(model_name = 'heart-disease-hyper'
, model_path='./outputs/model.pkl')
model.download(target_dir="outputs", exist_ok=True)

he accuracy of hyperdrive model is 87% 
As the hyperdrive model has lower accuracy we do not deploy it.

AutoML:
